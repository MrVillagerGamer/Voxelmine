#version 430 core
#define MAX_LIGHTS 64
#define CHUNK_SIZE 16
in vec4 pass_Position;
in vec4 pass_TransformedPosition;
in vec3 pass_Color;
in vec3 pass_Normal;
in vec2 pass_TexCoord;
in vec4 pass_ShadowPosition;
in vec3 pass_TangentCameraPosition;
in vec3 pass_TangentPosition;
in mat3 pass_TBNMatrix;
in vec3 pass_RelativePosition;
uniform mat4 uniform_ProjMatrix;
uniform mat4 uniform_ViewMatrix;
uniform mat4 uniform_DepthProjMatrix;
uniform mat4 uniform_DepthViewMatrix;
uniform mat4 uniform_ModelMatrix;
uniform vec3 uniform_LightDirection;
uniform vec3 uniform_ViewPosition;
uniform vec4 uniform_ChunkLights[MAX_LIGHTS];
uniform int uniform_ChunkLightCount;
uniform int uniform_AtlasSize;
//uniform int uniform_HeightMap[CHUNK_SIZE*CHUNK_SIZE]; // For lighting
layout (binding=0) uniform sampler2D uniform_Sampler;
layout (binding=1) uniform sampler2D uniform_NormalSampler;
layout (binding=2) uniform sampler2D uniform_ShadowSampler;
layout (binding=3) uniform sampler2D uniform_DepthSampler;
out vec4 out_Color;
float interpolate(float a, float b, float blend) {
	float theta = blend * 3.14159;
	float f = (1.0 - cos(theta)) * 0.5;
	return a * (1.0 - f) + b * f;
}
float getShadowDisplaced(vec2 off) {
	if(uniform_LightDirection.y >= 0.0) {
		return 1.0;
	}
	vec2 texelOff = off / textureSize(uniform_ShadowSampler, 0).x;
	if(texelOff.x > 1.0 || texelOff.y > 1.0 || texelOff.x < 0.0 || texelOff.y < 0.0) {
		return 0.0;
	}
	float bias = 0.001 * (4096/textureSize(uniform_ShadowSampler, 0).x);
	vec3 projCoords = pass_ShadowPosition.xyz / pass_ShadowPosition.w;
	
	projCoords = projCoords * 0.5 + 0.5;
	if(projCoords.z < 0.0 || projCoords.z > 1.0) {
		return 0.0;
	}
	float closestDepth = texture(uniform_ShadowSampler, texelOff).r; 
	float currentDepth = projCoords.z;
	float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
	//shadow = currentDepth - bias - closestDepth;
	//shadow *= 100000;
	//shadow = clamp(shadow, 0.0, 1.0);
	//shadow /= 1.5;
	return shadow;
}
float tempShadow[4][4];
float getShadowSmooth(ivec2 off) {
	//float d = 1;
	//float corners = getShadowDisplaced(vec2(off.x+d, off.y+d)) + 
	//				getShadowDisplaced(vec2(off.x+d, off.y-d)) +
	//				getShadowDisplaced(vec2(off.x-d, off.y+d)) +
	//				getShadowDisplaced(vec2(off.x-d, off.y-d));
	//float edges = getShadowDisplaced(vec2(off.x+d, off.y)) + 
	//				getShadowDisplaced(vec2(off.x, off.y-d)) +
	//				getShadowDisplaced(vec2(off.x, off.y+d)) +
	//				getShadowDisplaced(vec2(off.x-d, off.y));
	//float center = getShadowDisplaced(off);
	float corners = tempShadow[0+off.x][0+off.y] +
					tempShadow[2+off.x][2+off.y] +
					tempShadow[0+off.x][2+off.y] +
					tempShadow[2+off.x][0+off.y];
	float edges = tempShadow[0+off.x][1+off.y] +
					tempShadow[1+off.x][0+off.y] +
					tempShadow[2+off.x][1+off.y] +
					tempShadow[1+off.x][2+off.y];
	float center = tempShadow[1+off.x][1+off.y];
	float result = corners / 8.0 / 4.0 + edges / 4.0 / 4.0 + center / 2.0;
	return result;
	/*float result = 0.0;
	float total = 0.0;
	for(float i = -d; i <= d; i+=0.5) {
		for(float j = -d; j <= d; j+=0.5) {
			result += getShadowDisplaced(off+vec2(i, j));
			total += 1.0;
		}
	}
	return result/total;*/
}
float getShadow() {
	vec3 projCoords = pass_ShadowPosition.xyz / pass_ShadowPosition.w;
	projCoords = projCoords * 0.5 + 0.5;
	float x = projCoords.x * textureSize(uniform_ShadowSampler, 0).x;
	float z = projCoords.y * textureSize(uniform_ShadowSampler, 0).x;
	//return getShadowSmooth(vec2(x, z));
	float fracX = x - float(int(x));
	float fracZ = z - float(int(z));
	int intX = int(x);
	int intZ = int(z);
	for(int i = intX-1; i <= intX+2; i++) {
		for(int j = intZ-1; j <= intZ+2; j++) {
			tempShadow[i-intX+1][j-intZ+1] = getShadowDisplaced(vec2(i, j));
		}
	}
	intX = 0;
	intZ = 0;
	//return getShadowSmooth(vec2(x, z));
	float v1 = getShadowSmooth(ivec2(0, 0));
	float v2 = getShadowSmooth(ivec2(1, 0));
	float v3 = getShadowSmooth(ivec2(0, 1));
	float v4 = getShadowSmooth(ivec2(1, 1));
	float i1 = mix(v1, v2, fracX);
	float i2 = mix(v3, v4, fracX);
	return mix(i1, i2, fracZ);
}
float calcBrightness(vec3 c) {
	return (c.r + c.g + c.b) / 3.0;
}
vec3 dirs[26] = {
	vec3(0, 1, 0),
	vec3(0, -1, 0),
	vec3(1, 0, 0),
	vec3(-1, 0, 0),
	vec3(0, 0, 1),
	vec3(0, 0, -1),
	// Edge Diagonals
	vec3(1, 1, 0),
	vec3(1, -1, 0),
	vec3(-1, 1, 0),
	vec3(-1, -1, 0),
	vec3(0, 1, 1),
	vec3(0, -1, 1),
	vec3(0, 1, -1),
	vec3(0, -1, -1),
	vec3(1, 0, 1),
	vec3(-1, 0, 1),
	vec3(1, 0, -1),
	vec3(-1, 0, -1),
	// Corner Diagonals
	vec3(-1, -1, -1),
	vec3(1, -1, -1),
	vec3(-1, 1, -1),
	vec3(1, 1, -1),
	vec3(-1, -1, 1),
	vec3(1, -1, 1),
	vec3(-1, 1, 1),
	vec3(1, 1, 1),
	
};
float getSSAO(vec4 reference) {
	vec4 pos = uniform_ProjMatrix * uniform_ViewMatrix * reference;
	float total = 0.0, max = 0.0;
	for(int i = 0; i < 6; i++) {
		vec3 off = dirs[18+(i%6)]/2;
		
		//if(off.x == 1 || off.y == 1 || off.z == 1) discard;
		vec4 viewPos = uniform_ViewMatrix * (reference + vec4(off, 0.0));
		vec4 depthPos = uniform_ProjMatrix * viewPos;
		for(int j = 0; j < 6; j++) {
			vec4 lerpPos = mix(pos, depthPos, j/4.0);
			lerpPos.xyz /= lerpPos.w;
			lerpPos = lerpPos * 0.5 + 0.5;
			//if(depthPos.x < 0 || depthPos.y < 0 || depthPos.x > 1 || depthPos.y > 1 || depthPos.z < 0 || depthPos.z > 1) {
			//	continue;
			//}
			lerpPos.x = clamp(lerpPos.x, 0, 1);
			lerpPos.y = clamp(lerpPos.y, 0, 1);
			lerpPos.z = clamp(lerpPos.z, 0, 1);
			
			max += 1.0;
			float depth = texture2D(uniform_DepthSampler, lerpPos.xy).r;
			//if(depth < lerpPos.z+0.0002/lerpPos.w) {
			//	total += 1.0;
			//}
			total += clamp(((lerpPos.z+0.0005/lerpPos.w)-depth)*100000.0, 0.0, 1.0);
		}
	}
	if(max == 0.0) return 0.0;
	float result = total/max;
	return result;
}
float fmod(float a, float b) {
	return (a/b-int(a/b))*b;
}
vec3 getFogColor(vec3 dir) {
	float b = 0;//1 * pow(max(dot(normalize(-uniform_LightDirection), normalize(dir)), 0.0), 256);
	vec3 lightDir2 = uniform_LightDirection;
	lightDir2.y *= 100;
	float sunsetFactor = 1;//pow(max(dot(normalize(-lightDir2), normalize(dir)), 0.0), 1);
	lightDir2.y = 0;
	vec3 pos2 = dir;
	pos2.y *= 6;
	sunsetFactor *= pow(max(dot(normalize(-lightDir2), normalize(pos2))/2.0+0.5, 0.0), 1);
	sunsetFactor *= (1.0 - pow(abs(uniform_LightDirection.y), 1));
	float f = 1-sunsetFactor;
	vec3 color = vec3(0);
	color.r = (0.75-f/1.5) + b;
	color.b = f + b;
	color.g = b + 0.5;
	color *= -uniform_LightDirection.y/2.0+0.67;
	color *= 1.2;
	return color;
}
void main() {
	vec2 texCoords = pass_TexCoord;
	
	ivec2 texSize = ivec2(texCoords);// + ivec2(1);
	texCoords.x = fmod(texCoords.x, 1.0);
	texCoords.y = fmod(texCoords.y, 1.0);
	ivec2 texIndex = ivec2(texCoords*16.0);
	
	// Put sub-image in range 0..1
	texCoords.x *= uniform_AtlasSize;
	texCoords.y *= uniform_AtlasSize;
	texCoords.x -= texIndex.x;
	texCoords.y -= texIndex.y;
	
	// Fit over higher dimensions
	texCoords.x *= texSize.x;
	texCoords.y *= texSize.y;
	
	// Put back in range 0..1
	texCoords.x = fmod(texCoords.x, 1.0);
	texCoords.y = fmod(texCoords.y, 1.0);
	
	// Put back in original range
	texCoords.x += texIndex.x;
	texCoords.y += texIndex.y;
	texCoords.x /= uniform_AtlasSize;
	texCoords.y /= uniform_AtlasSize;
		
	vec4 color = texture2D(uniform_Sampler, texCoords);
	if(color.a < 0.5) discard;
	
	float cexp = 1.0;
	color.r = pow(color.r, cexp);
	color.g = pow(color.g, cexp);
	color.b = pow(color.b, cexp);
	//vec3 sampleNormal = texture2D(uniform_NormalSampler, texCoords).rgb * 2.0 - 1.0;
	//vec3 normal = sampleNormal * pass_TBNMatrix;
	//normal = normalize(normal);
	vec3 normal = pass_Normal;
	
	// Specular
	//float specularStrength = 0.5;
	//vec3 viewDir = normalize(uniform_ViewPosition - pass_Position.xyz);
	//vec3 reflectDir = reflect(-uniform_LightDirection, normal);  
	//float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	//vec3 specular = vec3(specularStrength * spec);  
	vec3 specular = vec3(0);

	//int hidx = int(pass_RelativePosition.x) + CHUNK_SIZE * int(pass_RelativePosition.z);
	//if(hidx > CHUNK_SIZE*CHUNK_SIZE) discard;
	//float b = max(1.0-abs(pass_RelativePosition.y-uniform_HeightMap[hidx]), 0.0);

	// Diffuse
	vec3 diffuse = vec3(dot(-uniform_LightDirection, normal)/2+0.5);
	diffuse = mix(diffuse, vec3(1.0), 0.5);
	
	vec3 dist = pass_Position.xyz-uniform_ViewPosition;
	float fogf = clamp(length(dist)/100.0, 0.0, 1.0);
	vec3 fogColor = getFogColor(normalize(dist));
	
	float ambient = 0.1;
	float shadow = getShadow();
	float ssao = getSSAO(pass_Position);
	vec3 final = (ambient * color.rgb + (1.3 - shadow) * (diffuse + specular) * color.rgb * (1.3 - ssao + 0.0));
	out_Color = vec4(mix(final * pass_Color, fogColor, fogf), 1.0);
}