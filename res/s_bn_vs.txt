#version 430 core
layout (location=0) in vec3 in_Position;
layout (location=1) in vec3 in_Normal;
layout (location=2) in vec3 in_Color;
layout (location=3) in vec2 in_TexCoord;
layout (location=4) in vec3 in_Tangent;
layout (location=5) in vec3 in_BiTangent;
uniform mat4 uniform_ProjMatrix;
uniform mat4 uniform_ViewMatrix;
uniform mat4 uniform_DepthProjMatrix;
uniform mat4 uniform_DepthViewMatrix;
uniform mat4 uniform_ModelMatrix;
uniform vec3 uniform_ViewPosition;
out vec3 pass_Color;
out vec3 pass_Normal;
out vec2 pass_TexCoord;
out vec4 pass_Position;
out vec3 pass_RelativePosition;
out vec4 pass_ShadowPosition;
out vec3 pass_TangentCameraPosition;
out vec3 pass_TangentPosition;
out mat3 pass_TBNMatrix;
void main() {
	pass_ShadowPosition = uniform_DepthProjMatrix * uniform_DepthViewMatrix * uniform_ModelMatrix * vec4(in_Position, 1.0);
	pass_Color = in_Color;
	pass_Normal = in_Normal;
	pass_TexCoord = in_TexCoord;
	pass_Position = uniform_ModelMatrix * vec4(in_Position, 1.0);
	pass_RelativePosition = in_Position;
	vec3 T   = normalize(mat3(uniform_ModelMatrix) * in_Tangent);
    vec3 B   = normalize(mat3(uniform_ModelMatrix) * in_BiTangent);
    vec3 N   = normalize(mat3(uniform_ModelMatrix) * in_Normal);
    pass_TBNMatrix = transpose(mat3(T, B, N));
	pass_TangentPosition = pass_TBNMatrix * pass_Position.xyz;
	pass_TangentCameraPosition = pass_TBNMatrix * uniform_ViewPosition;
	gl_Position = uniform_ProjMatrix * uniform_ViewMatrix * uniform_ModelMatrix * vec4(in_Position, 1.0);
	
}